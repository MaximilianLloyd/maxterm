{"_uri":"file:///home/max/C/maxterm/main.c","_languageId":"c","_version":0,"_content":"#include <SDL2/SDL.h>\n#include <SDL2/SDL_rect.h>\n#include <SDL2/SDL_render.h>\n#include <SDL2/SDL_ttf.h>\n\n\nstruct SDL_Rect* drawText(\n    char *text,\n    SDL_Color color,\n    TTF_Font *font,\n    SDL_Renderer *renderer,\n) {\n  SDL_Surface *surface;\n  SDL_Texture *texture;\n    SDL_Rect *textRect\n\n  surface = TTF_RenderText_Solid(font, text, color);\n  if (surface == NULL) {\n    fprintf(stderr, \"TTF_RenderText_Solid Error: %s\\n\", TTF_GetError());\n    return NULL;\n  }\n\n  texture = SDL_CreateTextureFromSurface(renderer, surface);\n  if (texture == NULL) {\n    fprintf(stderr, \"SDL_CreateTextureFromSurface Error: %s\\n\", SDL_GetError());\n    return NULL;\n  }\n\n  SDL_Rect textRect = {10, 10, surface->w, surface->h}; // top-left at (10, 10)\n                                                        //\n  return &textRect;\n}\n\nint main(int argc, char *argv[]) {\n  SDL_Window *window;\n  SDL_Renderer *renderer;\n  SDL_Surface *surface;\n  SDL_Texture *texture;\n  SDL_Color textColor = {255, 255, 255, 0};\n  SDL_Event event;\n\n  int quit = 0;\n\n  // Initialize SDL\n  if (SDL_Init(SDL_INIT_VIDEO) != 0) {\n    fprintf(stderr, \"Could not initialize sdl2: %s\\n\", SDL_GetError());\n    return EXIT_FAILURE;\n  }\n\n  if (TTF_Init() == -1) {\n    fprintf(stderr, \"TTF_Init: %s\\n\", TTF_GetError());\n    return EXIT_FAILURE;\n  }\n\n  // Create an SDL window\n  window =\n      SDL_CreateWindow(\"SDL2 Simple Window\", SDL_WINDOWPOS_UNDEFINED,\n                       SDL_WINDOWPOS_UNDEFINED, 640, 480, SDL_WINDOW_SHOWN);\n  // Create a renderer\n  renderer = SDL_CreateRenderer(\n      window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);\n\n  if (renderer == NULL) {\n    fprintf(stderr, \"SDL_CreateRenderer Error: %s\\n\", SDL_GetError());\n    SDL_DestroyWindow(window);\n    return EXIT_FAILURE;\n  }\n\n  if (window == NULL) {\n    fprintf(stderr, \"SDL_CreateWindow Error: %s\\n\", SDL_GetError());\n    return EXIT_FAILURE;\n  }\n\n  TTF_Font *font = TTF_OpenFont(\"/home/max/C/maxterm/font.ttf\", 24);\n\n  if (font == NULL) {\n    fprintf(stderr, \"TTF_OpenFont Error: %s\\n\", TTF_GetError());\n    return EXIT_FAILURE;\n  }\n\n  // Create a surface with the text\n  texture = drawText(\"Hello, World!\", textColor, font, renderer);\n\n  SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); // Black background\n  SDL_RenderClear(renderer);\n\n\n  // Listen for keys\n  while (!quit) {\n    while (SDL_PollEvent(&event)) {\n      switch (event.type) {\n      case SDL_QUIT:\n        quit = 1;\n        break;\n      case SDL_KEYDOWN:\n        printf(\"Key pressed: %d\\n\", event.key.keysym.sym);\n        //\n        // print the character, too\n        // printf(\"Character pressed: %c\\n\", event.key.keysym.sym);\n\n        switch (event.key.keysym.sym) {\n        case SDLK_q:\n          quit = 1;\n          break;\n        default:\n          break;\n        }\n        break;\n      default:\n        break;\n      }\n    }\n\n  // Render the texture (our text)\n  SDL_RenderCopy(renderer, texture, NULL, &textRect);\n\n  SDL_RenderPresent(renderer);\n    // Draw to the window\n  }\n\n  // Clean up\n  SDL_FreeSurface(surface);\n  SDL_DestroyTexture(texture);\n  TTF_CloseFont(font);\n  SDL_DestroyRenderer(renderer);\n  SDL_DestroyWindow(window);\n  TTF_Quit();\n  SDL_Quit();\n\n  return EXIT_SUCCESS;\n}\n"}